name: Pyre-fly Typecheck

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  typecheck:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Configure Poetry to create venv in project
        run: poetry config virtualenvs.in-project true

      - name: Cache Poetry virtualenv
        uses: actions/cache@v4
        id: poetry-cache # Add an id to access cache-hit status
        with:
          path: .venv # Cache the .venv directory in the project root
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies with Poetry
        # Only run poetry install if cache was not hit
        # or if the lock file changed (which invalidates the primary key)
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        run: poetry install --all-extras --no-interaction --no-root

      # Runs in the repository root.
      # typecheck.log and errors_current.txt will be created at the repository root.
      - name: Run typecheck
        run: |
          set -eo pipefail
          # Use poetry run to ensure make uses the correct environment
          poetry run make typecheck 2>&1 | tee typecheck.log || true
          # extract only lines starting with "ERROR "
          grep '^ERROR ' typecheck.log > errors_current.txt

      # Uploads typecheck.log from the repository root
      - name: Upload raw log
        uses: actions/upload-artifact@v4
        with:
          name: typecheck-log
          path: typecheck.log

      - name: Compare errors, comment & fail on new
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const { owner, repo } = context.repo;
            const pr = context.payload.pull_request.number;

            // Read current errors from the repository root
            const current = fs.readFileSync('errors_current.txt', 'utf8')
                              .trim().split('\n').filter(Boolean);

            // Fetch prior bot comments
            const { data: comments } = await github.rest.issues.listComments({ // Use github.rest.issues
              owner, repo, issue_number: pr
            });
            const typeComments = comments
              .filter(c => c.user.login === 'github-actions[bot]' && c.body.includes('**Typecheck report**'))
              .sort((a,b) => new Date(a.created_at) - new Date(b.created_at));

            let previous = [];
            if (typeComments.length) {
              // Extract the last Raw errors block
              const last = typeComments[typeComments.length - 1].body;
              const m = last.match(/```txt\n([\s\S]*?)\n```/);
              if (m) previous = m[1].split('\n').filter(Boolean);
            }

            // Diff
            const added = current.filter(e => !previous.includes(e));
            const removed = previous.filter(e => !current.includes(e));

            // Build comment
            const lines = [
              "**Typecheck report**",
              `- Total errors: **${current.length}**`
            ];

            if (typeComments.length) {
              if (removed.length) {
                lines.push(`\nðŸŽ‰ **Fixed ${removed.length} error(s):**`);
                lines.push("```diff");
                removed.forEach(e => lines.push(`- ${e}`));
                lines.push("```");
              }
              if (added.length) {
                lines.push(`\nðŸš¨ **Introduced ${added.length} new error(s):**`);
                lines.push("```diff");
                added.forEach(e => lines.push(`+ ${e}`));
                lines.push("```");
              }
            }

            // Always include full raw list for next diff
            lines.push("\n### Raw errors");
            lines.push("```txt");
            current.forEach(e => lines.push(e));
            lines.push("```");

            // Post the comment
            await github.rest.issues.createComment({ // Use github.rest.issues
              owner, repo, issue_number: pr,
              body: lines.join("\n")
            });

            // Fail if any new errors were introduced
            if (added.length) {
              core.setFailed(`New type errors introduced: ${added.length}`);
            }
