name: Typecheck

on:
  pull_request_target:
    types: [opened, synchronize, reopened]

jobs:
  typecheck_pr:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project true
          poetry config virtualenvs.create true

      - name: Get Poetry version
        id: poetry-version
        run: echo "version=$(poetry --version | awk '{print $3}')" >> $GITHUB_OUTPUT

      - name: Cache Poetry virtualenv
        uses: actions/cache@v4
        id: poetry-cache
        with:
          path: |
            .venv
            ~/.cache/pypoetry/virtualenvs
            ~/.cache/pypoetry/cache
          key: ${{ runner.os }}-poetry-${{ steps.poetry-version.outputs.version }}-python-${{ hashFiles('**/poetry.lock', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-poetry-${{ steps.poetry-version.outputs.version }}-python-
            ${{ runner.os }}-poetry-

      - name: Install dependencies with Poetry
        run: poetry install --all-extras --no-interaction

      - name: Run typecheck and capture errors
        id: run_pr_typecheck
        run: |
          set -eo pipefail
          # Run typecheck and capture all output (stdout & stderr). Allow it to "fail" if errors exist.
          TYPECHECK_FULL_OUTPUT=$(poetry run make typecheck 2>&1 || true)

          # Save full output to a log file in the workspace (for action debugging, not an artifact)
          echo "${TYPECHECK_FULL_OUTPUT}" > pr_typecheck.log

          # Extract only error lines. If no errors, ERRORS will be empty.
          # The `|| true` ensures grep doesn't fail the script if no errors are found.
          ERRORS=$(echo "${TYPECHECK_FULL_OUTPUT}" | grep '^ERROR ' || true)

          # Set the (potentially multi-line) errors as a step output.
          # This uses a heredoc to correctly handle multi-line inputs.
          echo "typecheck_errors<<EOF" >> "$GITHUB_OUTPUT"
          echo "${ERRORS}" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Report PR typecheck errors & fail if any
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const pr_number = context.payload.pull_request.number;

            // Errors are passed as a multi-line string from the previous step's output
            const raw_errors_output = process.env.TYPECHECK_ERRORS_FROM_STEP;
            const current_errors = raw_errors_output.trim().split('\n').filter(Boolean);

            const comment_body_lines = [];

            if (current_errors.length > 0) {
              comment_body_lines.push(`**Typecheck Report: ${current_errors.length} error(s) found.**`);
              comment_body_lines.push("\n```txt");
              current_errors.forEach(error => comment_body_lines.push(error));
              comment_body_lines.push("```");
            } else {
              comment_body_lines.push("âœ… **Typecheck Report: No type errors found in this PR!**");
            }

            try {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pr_number,
                body: comment_body_lines.join('\n'),
              });
            } catch (error) {
              core.error(`Failed to create PR comment: ${error.message}. Ensure the GITHUB_TOKEN has 'issues: write' permissions.`);
            }

            if (current_errors.length > 0) {
              core.setFailed(`Typecheck failed with ${current_errors.length} error(s). See the PR comment for details.`);
            }
        env:
          TYPECHECK_ERRORS_FROM_STEP: ${{ steps.run_pr_typecheck.outputs.typecheck_errors }}
